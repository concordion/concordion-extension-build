buildscript {
  repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }        
   }
   dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'net.researchgate:gradle-release:2.6.0'
        classpath 'org.ajoberstar:gradle-git-publish:1.0.0'
        classpath 'net.nemerosa:versioning:2.7.1'
    }
}

apply plugin: 'java'
apply plugin: 'wrapper'
apply plugin: 'maven-publish'
apply plugin: net.researchgate.release.ReleasePlugin
apply plugin: com.jfrog.bintray.gradle.BintrayPlugin
apply plugin: org.ajoberstar.gradle.git.publish.GitPublishPlugin
apply plugin: net.nemerosa.versioning.VersioningPlugin

ext {
    githubUrl = "https://github.com/concordion/${project.name}"
    issuesUrl = "${githubUrl}/issues"
    vcsUrl =  "${githubUrl}.git"
    gitRepoUri = "git@github.com:concordion/${project.name}.git"
    vcsConnection = "scm:git:git://github.com/concordion/${project.name}.git"

    if (!project.hasProperty("bintrayUsername")) {
        bintrayUsername = ''
    }
    if (!project.hasProperty("bintrayApiKey")) {
        bintrayApiKey = ''
    }
    if (!project.hasProperty("bintrayPassphrase")) {
        bintrayPassphrase = ''
    }
    if (!project.hasProperty("sonatypeUsername")) {
        sonatypeUsername = ''
    }
    if (!project.hasProperty("sonatypePassword")) {
        sonatypePassword = ''
    }
}

wrapper {
    gradleVersion = "4.10.2"
}

repositories {
    jcenter()
    mavenLocal()
}

dependencies {
    compile 'org.concordion:concordion:2.2.0'
    testCompile 'org.concordion:concordion:2.2.0:tests'
}

compileJava {
    sourceCompatibility = 1.6
    targetCompatibility = 1.6
}

group='org.concordion'

jar {
    manifest {
        attributes  'Specification-Title'   : project.name,
                    'Implementation-Title'  : project.name,
                    'Specification-Version' : version.substring(0, version.lastIndexOf(".")),
                    'Implementation-Version': version,
                    'Implementation-Vendor' : 'concordion.org',
                    'Specification-Vendor'  : 'concordion.org',
                    'Created-By'            : System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')',
                    'Built-With'            : "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
                    'Build-Time'            : String.format("%tFT%<tRZ", Calendar.getInstance(TimeZone.getTimeZone("Z"))),
                    'Build-Revision'        : versioning.info.commit,
                    'Build-OS'              : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
    }
}

test {
    systemProperties['concordion.output.dir'] = "$reporting.baseDir/spec"
    outputs.upToDateWhen { false } // force it to run even if test code hasn't changed
    testLogging {
        events "passed", "skipped", "failed", "standardError"
    }
}

createReleaseTag.dependsOn bintrayUpload

gitPublishCopy.dependsOn test
gitPublishCopy.dependsOn javadoc

task publishDocs(dependsOn: ['gitPublishPush'])

task publishSnapshot(dependsOn: ['test', 'publishMainPublicationToMavenRepository'])

task publishRelease(dependsOn: ['sourcesJar', 'javadocJar', 'publishDocs', 'release'])

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

gitPublish {
    // where to publish to (repo must exist)
    repoUri = gitRepoUri.toString()
    // branch will be created if it doesn't exist
    branch = 'gh-pages'

    // what to publish, this is a standard CopySpec
    contents {
        from 'docs'

        from ('build/reports/spec') {
            into 'spec'
        }

        from(javadoc) {
            into 'api'
        }
    }

    // message used when committing changes
    commitMessage = 'Publishing new Github pages' // defaults to 'Generated by gradle-git-publish'
}

publishing {
    repositories {
        maven {
            if (project.version.endsWith('-SNAPSHOT')) {
                url "http://oss.jfrog.org/artifactory/simple/oss-snapshot-local/"
                credentials {
                    username bintrayUsername
                    password bintrayApiKey
                }
            }
        }        
    }
}

publishing {
    publications {
        main(MavenPublication) {
            artifact sourcesJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }

            from components.java

            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST

                    name project.name
                    description project.description
                    url githubUrl
                    packaging 'jar'
                    inceptionYear inceptionYear

                    scm {
                        url vcsUrl
                        connection vcsConnection
                        developerConnection vcsConnection
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.html'
                            distribution 'repo'
                        }
                    }

                    issueManagement{
                        system 'GitHub Issues'
                        url issuesUrl
                    }

                    developers developers
                }
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }
        }
    }
}

bintray {
    user = bintrayUsername   // set this in your ~/.gradle/gradle.properties file
    key = bintrayApiKey         // set this in your ~/.gradle/gradle.properties file 
    publications = ['main'] // see publications closure
//    dryRun = true
    publish = true
    pkg {
        repo = 'maven'
        userOrg = 'concordion'
        name = project.name
        desc = project.description
        licenses = ['Apache-2.0']
        issueTrackerUrl = issuesUrl
        vcsUrl = vcsUrl
        websiteUrl = githubUrl
        version  {
            name = project.version
            released = new Date()
            vcsTag = project.version
            gpg {
                sign = true
                passphrase = bintrayPassphrase // set this in your ~/.gradle/gradle.properties file 
            }
            mavenCentralSync {
                sync = true
                user = sonatypeUsername              // set this in your ~/.gradle/gradle.properties file 
                password = sonatypePassword          // OSS user password// set this in your ~/.gradle/gradle.properties file 
                close = '1'
            }
        }
    }
}